apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  LOG_LEVEL: "INFO"
  APP_PORT: "5000"
  WELCOME_MESSAGE: "Welcome to the custom app"
  APP_PYTHON: |
    import os
    import json
    import logging
    from flask import Flask, request, jsonify


    LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
    APP_PORT = int(os.environ.get('APP_PORT', 5000))
    WELCOME_MESSAGE = os.environ.get('WELCOME_MESSAGE', 'Welcome to the custom app')


    log_directory = '/app/logs'
    os.makedirs(log_directory, exist_ok=True)
    log_file = os.path.join(log_directory, 'app.log')

    logging.basicConfig(
        level=getattr(logging, LOG_LEVEL),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )

    logger = logging.getLogger(__name__)
    app = Flask(__name__)

    @app.route('/', methods=['GET'])
    def welcome():
        logger.info("Вызвана корневая ручка")
        return WELCOME_MESSAGE

    @app.route('/status', methods=['GET'])
    def status():
        logger.info("Вызвана ручка статуса")
        return jsonify({"status": "ok"})

    @app.route('/log', methods=['POST'])
    def log_message():
        data = request.get_json()
        message = data.get('message', '')
        logger.info(f"Вызвана ручка лога с сообщением: {message}")


        with open(log_file, 'a') as f:
            f.write(f"{message}\n")

        return jsonify({"success": True})

    @app.route('/logs', methods=['GET'])
    def get_logs():
        logger.info("Вызвана ручка получения логов")
        try:
            with open(log_file, 'r') as f:
                logs = f.read()
            return logs
        except Exception as e:
            logger.error(f"Ошибка чтения логов: {e}")
            return jsonify({"error": str(e)}), 500

    if __name__ == '__main__':
        logger.info(f"Запуск приложения на порту {APP_PORT}")
        app.run(host='0.0.0.0', port=APP_PORT, debug=False)
